     1                                  
     2                                  bits 32 ;assembling for the 32 bits architecture
     3                                  ; the start label will be the entry point in the program
     4                                  global  start 
     5                                  
     6                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
     7                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
     8                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
     9                                  segment  data use32 class=data ; the data segment where the variables are declared 
    10 00000000 616263646566                 s1 db 'a', 'b', 'c', 'd', 'e', 'f' ; declare the string of bytes
    11 00000006 3132333435                   s2 db '1', '2', '3', '4', '5' ; 
    12                                  	 l1 equ $-s1 ; compute the length of the string 1 in l1
    13                                       l2 equ $-s2 ; compute the length of the string 2 in l2
    14 0000000B 00<rept>                	 d times l1 db 0 ; reserve l1+l2 bytes for the destination string and initialize it
    15                                  segment  code use32 class=code ; code segment
    16                                  start: 
    17                                  
    18                                       ; Two character strings S1 and S2 are given. Obtain the string D by concatenating the elements found on even positions in S2 and the elements ; ; ; found on odd positions in S1.
    19                                       ; The result should be D: '2','4','a','c','e'
    20                                  
    21                                       
    22 00000000 B905000000                   mov ecx, l2 ; we put the length l2 in ECX in order to make the loop
    23 00000005 BE01000000              	 mov esi, 1 ;
    24 0000000A BB00000000                   mov ebx, 0 ;
    25 0000000F 83E901                       sub ecx, 1 ;
    26 00000012 E313                    	 jecxz endFor      
    27                                  	 forIndex
    27          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    28 00000014 8A86[06000000]          		mov al, [s2+esi];        
    29 0000001A 8883[0B000000]          		mov [d+ebx], al;
    30 00000020 43                              inc ebx
    31 00000021 83C602                  		add esi, 2;
    32 00000024 49                              dec ecx
    33 00000025 E2ED                    	 loop forIndex
    34                                  	 endFor;
    34          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    35                                       
    36 00000027 B90B000000                   mov ecx, l1 ; 
    37 0000002C 83E905                       sub ecx, l2 ; we put the length l1 in ECX in order to make the loop
    38 0000002F BE00000000                   mov esi, 0;
    39                                       
    40 00000034 E313                    	 jecxz endFor1      
    41                                  	 forIndex1
    41          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    42 00000036 8A86[00000000]          		mov al, [s1+esi];        
    43 0000003C 8883[0B000000]          		mov [d+ebx], al;
    44 00000042 43                              inc ebx;
    45 00000043 83C602                          add esi, 2;
    46 00000046 49                              dec ecx
    47 00000047 E2ED                    	 loop forIndex1
    48                                  	 endFor1;
    48          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    49 00000049 A1[0B000000]                 mov eax, dword [d]
    50 0000004E 8B15[0F000000]               mov edx, dword [d+4]
    51                                  
    52 00000054 6A00                         push dword 0 ;saves on stack the parameter of the function exit
    53 00000056 FF15[00000000]               call [exit] ;function exit is called in order to end the execution ofthe program	
