     1                                  ; the bits 0-7 of C are the same as the bits 21-28 of A
     2                                  ; the bits 8-15 of C are the same as the bits 23-30 of B complemented
     3                                  ; the bits 16-21 of C have the value 101010
     4                                  ; the bits 22-31 of C have the value 0
     5                                  ; the bits 32-42 of C are the same as the bits 21-31 of B
     6                                  ; the bits 43-55 of C are the same as the bits 1-13 of A
     7                                  ; the bits 56-63 of C are the same as the bits 24-31 of the result A XOR 0ABh
     8                                  
     9                                  
    10                                  bits 32 ;assembling for the 32 bits architecture
    11                                  ; the start label will be the entry point in the program
    12                                  global  start 
    13                                  
    14                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
    15                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    16                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    17                                  segment  data use32 class=data ; the data segment where the variables are declared 
    18 00000000 C1045777                     A dd 0111_0111_0101_0111_0000_0100_1100_0001b
    19 00000004 041C4339                     B dd 0011_1001_0100_0011_0001_1100_0000_0100b
    20 00000008 <res 00000004>               c resd 1
    21                                  segment  code use32 class=code ; code segment
    22                                  start: 
    23                                  
    24                                       ; we put the result in EBX:ECX
    25 00000000 BB00000000                   mov EBX, 0;
    26 00000005 B900000000                   mov ECX, 0;
    27                                       
    28                                       ; the bits 0-7 of C are the same as the bits 21-28 of A
    29 0000000A A1[00000000]                 mov EAX, [A];
    30 0000000F 250000E01F                   and EAX, 0001_1111_1110_0000_0000_0000_0000_0000b
    31 00000014 C1C815                       ror EAX, 21;
    32 00000017 09C1                         or ECX, EAX;
    33                                       
    34                                       ; the bits 8-15 of C are the same as the bits 23-30 of B complemented
    35 00000019 A1[04000000]                 mov EAX, [B];
    36 0000001E F7D0                         not EAX;
    37 00000020 83C001                       add EAX, 1;
    38 00000023 250000807F                   and EAX, 0111_1111_1000_0000_0000_0000_0000_0000b
    39 00000028 C1C80F                       ror EAX, 15;
    40 0000002B 09C1                         or ECX, EAX;
    41                                       
    42                                       ; the bits 16-21 of C have the value 101010
    43 0000002D 81C900002A00                 or ECX, 0000_0000_0010_1010_0000_0000_0000_0000b
    44                                       
    45                                       ; the bits 22-31 of C have the value 0
    46 00000033 83C900                       or ECX, 0000_0000_0000_0000_0000_0000_0000_0000b
    47                                       
    48                                       ; the bits 32-42 of C are the same as the bits 21-31 of B
    49 00000036 A1[04000000]                 mov EAX, [B];
    50 0000003B 250000E0FF                   and EAX, 1111_1111_1110_0000_0000_0000_0000_0000b
    51 00000040 C1C815                       ror EAX, 21;
    52 00000043 09C3                         or EBX, EAX;
    53                                       
    54                                       ; the bits 43-55 of C are the same as the bits 1-13 of A
    55 00000045 A1[00000000]                 mov EAX, [A];
    56 0000004A 25FE3F0000                   and EAX, 0000_0000_0000_0000_0011_1111_1111_1110b
    57 0000004F C1C00A                       rol EAX, 10;
    58 00000052 09C3                         or EBX, EAX;
    59                                       
    60                                       ; the bits 56-63 of C are the same as the bits 24-31 of the result A XOR 0ABh
    61 00000054 A1[00000000]                 mov EAX, [A];
    62 00000059 35AB000000                   xor EAX, 0000_0000_0000_0000_0000_0000_1010_1011b
    63 0000005E 25000080FF                   and EAX, 1111_1111_1000_0000_0000_0000_0000_0000b
    64 00000063 09C3                         or EBX, EAX;
    65                                      
    66                                  
    67 00000065 6A00                         push dword 0 ;saves on stack the parameter of the function exit
    68 00000067 FF15[00000000]               call [exit] ;function exit is called in order to end the execution ofthe program	
