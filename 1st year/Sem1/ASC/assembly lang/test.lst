     1                                  ;Given the words A and B, compute the word C as follows:
     2                                  ;- the bits 0-2 of C are the same as the bits 10-12 of B
     3                                  ;- the bits 3-6 of C have the value 1
     4                                  ;- the bits 7-10 of C are the same as the bits 1-4 of A
     5                                  ;- the bits 11-12 have the value 0
     6                                  ;- the bits 13-15 of C are the invert of the bits 9-11 of B
     7                                  
     8                                  ; We will obtain the word C by successive "isolation" of bits sequences. The isolation
     9                                  ; of the bits 10-12 of B is done by obtaining the unchanged values of these bits,  
    10                                  ; and initialising all other bits to 0. The isolation operation can be performed
    11                                  ; using the operator AND between the word B and the mask
    12                                  ; 0001110000000000. Once isolated, the sequence of bits is put on the right  position by using a rotation operation. 
    13                                  ; The final word is obtained by applying the operator OR between all intermediate results obtained by using isolations and rotations.
    14                                  
    15                                  ; Observation: bits are numbered from right to left
    16                                  
    17                                  bits 32 ;assembling for the 32 bits architecture
    18                                  ; the start label will be the entry point in the program
    19                                  global  start 
    20                                  
    21                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
    22                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    23                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    24                                  segment  data use32 class=data ; the data segment where the variables are declared 
    25 00000000 5777                         a dw 0111011101010111b
    26 00000002 BE9B                         b dw 1001101110111110b
    27 00000004 0000                         c dw 0
    28                                  segment  code use32 class=code ; code segment
    29                                  start: 
    30                                  
    31 00000000 66BB0000                     mov  bx, 0 ; we compute the result in bx
    32                                  
    33 00000004 66A1[02000000]               mov  ax, [b] ; we isolate bits 10-12 of B
    34 0000000A 6625001C                     and  ax, 0001110000000000b
    35 0000000E B10A                         mov  cl, 10
    36 00000010 66D3C8                       ror  ax, cl ; we rotate 10 positions to the right
    37 00000013 6609C3                       or   bx, ax ; we put the bits into the result
    38                                  
    39 00000016 6683CB78                     or   bx, 0000000001111000b ; we force the value of bits 3-6 of the result to the value 1
    40                                  
    41 0000001A 66A1[00000000]               mov  ax, [a] ; we isolate bits 1-4 of A
    42 00000020 6683E01E                     and  ax, 0000000000011110b
    43 00000024 B106                         mov  cl, 6
    44 00000026 66D3C0                       rol  ax, cl ; we rotate 6 positions to the left
    45 00000029 6609C3                       or   bx, ax ; punem bitii in rezultat
    46                                  
    47 0000002C 6681E3FFE7                   and  bx, 1110011111111111b ; facem biti 11-12 din rezultat sa aiba valoarea 0
    48                                  
    49 00000031 66A1[02000000]               mov  ax, [b]
    50 00000037 66F7D0                       not  ax ; we invert the value of b
    51 0000003A 6625000E                     and  ax, 0000111000000000b ; we isolate the bits 9-11 of B
    52 0000003E B104                         mov  cl, 4
    53 00000040 66D3C0                       rol  ax, cl ; we rotate 4 positions to the left
    54 00000043 6609C3                       or   bx, ax ; punem biti in rezultat
    55                                  
    56 00000046 66891D[04000000]             mov  [c], bx ; we move the result from the register to the result variable
    57                                  
    58 0000004D 6A00                         push dword 0 ;saves on stack the parameter of the function exit
    59 0000004F FF15[00000000]               call [exit] ;function exit is called in order to end the execution ofthe program	
