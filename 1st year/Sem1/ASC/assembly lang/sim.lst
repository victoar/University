     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll                   ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 41622C2043646B612E-         a db "Ab, Cdka. Opasd"
    15 00000009 204F70617364       
    16                                      len equ $-a
    17                                      b db ""
    18                                      c db ""
    19 0000000F 2573                        format db "%s" 
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                       
    26                                       
    27 00000000 BE[00000000]                 mov esi, a
    28 00000005 B90F000000                   mov ecx, len
    29 0000000A BB00000000                   mov ebx, 0; counter for b positions
    30 0000000F BA00000000                   mov edx, 0; counter for c positions
    31 00000014 E312                         jecxz endFor1
    32                                       forIndex1
    32          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    33 00000016 AC                               lodsb
    34 00000017 3C41                             cmp al, 41h
    35 00000019 7C0B                             jl noUppercase
    36 0000001B 3C5A                             cmp al, 5ah
    37 0000001D 7F07                             jg noUppercase
    38 0000001F 8883[0F000000]                   mov [b+ebx], al
    39 00000025 43                               inc ebx
    40                                          noUppercase:
    41 00000026 E2EE                         loop forIndex1
    42                                       endFor1:
    43                                       
    44 00000028 68[0F000000]                 push dword b
    45 0000002D 68[0F000000]                 push dword format
    46 00000032 FF15[00000000]               call [printf]
    47 00000038 83C408                       add ESP, 4*2
    48                                       
    49 0000003B BE[00000000]                 mov esi, a
    50 00000040 B90F000000                   mov ecx, len
    51 00000045 E312                         jecxz endFor2
    52                                       forIndex2
    52          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    53 00000047 AC                               lodsb
    54 00000048 3C61                             cmp al, 61h
    55 0000004A 7C0B                             jl noLowercase
    56 0000004C 3C7A                             cmp al, 7ah
    57 0000004E 7F07                             jg noLowercase
    58 00000050 8882[0F000000]                   mov [c+edx], al
    59 00000056 42                               inc edx
    60                                          noLowercase:
    61 00000057 E2EE                         loop forIndex2
    62                                      endFor2:
    63                                          
    64                                       
    65 00000059 68[0F000000]                 push dword c
    66 0000005E 68[0F000000]                 push dword format
    67 00000063 FF15[00000000]               call [printf]
    68 00000069 83C408                       add ESP, 4*2
    69                                       
    70 0000006C 68[00000000]                 push dword a
    71 00000071 68[0F000000]                 push dword format
    72 00000076 FF15[00000000]               call [printf]
    73 0000007C 83C408                       add ESP, 4*2
    74                                       
    75                                  
    76                                      
    77                                          ; exit(0)
    78 0000007F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    79 00000081 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
