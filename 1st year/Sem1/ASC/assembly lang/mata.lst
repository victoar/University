     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 6165696F754145494F-         caractere db "aeiouAEIOUbcdfghjklmnopqrstvwxyzBCDFGHJKLMNOPQRSTVWXYZ0123456789"
    15 00000009 556263646667686A6B-
    15 00000012 6C6D6E6F7071727374-
    15 0000001B 767778797A42434446-
    15 00000024 47484A4B4C4D4E4F50-
    15 0000002D 51525354565758595A-
    15 00000036 303132333435363738-
    15 0000003F 39                 
    16                                      lv equ $-caractere
    17 00000040 496E20706572696F61-         propozitie db "In perioada 20-23 Ianuarie 2020 sunt programate exeamenel la ASC!"
    17 00000049 64612032302D323320-
    17 00000052 49616E756172696520-
    17 0000005B 323032302073756E74-
    17 00000064 2070726F6772616D61-
    17 0000006D 746520657865616D65-
    17 00000076 6E656C206C61204153-
    17 0000007F 4321               
    18                                      l equ $-propozitie
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24                                      
    25 00000000 B9[41000000]                    mov ecx, propozitie + 1
    26 00000005 BE[00000000]                    mov esi, caractere
    27 0000000A BF[40000000]                    mov edi, propozitie
    28 0000000F B800000000                      mov eax, 0
    29 00000014 BB00000000                      mov ebx, 0
    30                                          
    31                                          repeta:
    32                                          
    33 00000019 A6                                  cmpsb
    34                                              
    35                                              ;
    36 0000001A 7508                                jne continuare
    37 0000001C FEC0                                inc al
    38 0000001E BE[00000000]                        mov esi, caractere
    39 00000023 43                                  inc ebx
    40                                              continuare:
    41 00000024 BF[40000000]                            mov edi, propozitie
    42 00000029 01DE                                    add esi, ebx
    43 0000002B 81FE[40000000]                          cmp esi, propozitie
    44 00000031 7506                                    jne urmatorul
    45 00000033 BE[00000000]                            mov esi, caractere
    46 00000038 43                                      inc ebx
    47                                              urmatorul:
    48 00000039 39CF                                    cmp edi, ecx
    49 0000003B 7402                                    je afara
    50 0000003D EBDA                               jmp repeta
    51                                             afara:
    52 0000003F 83E801                                sub eax, 1
    53 00000042 F7D8                                  neg eax
    54                                          
    55                                          ; exit(0)
    56 00000044 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 00000046 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
